// Generated by rstantools.  Do not edit by hand.

/*
    causalOT is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    causalOT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with causalOT.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_gp_hyper_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_gp_hyper");
    reader.add_event(211, 209, "end", "model_gp_hyper");
    return reader;
}
template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
pol_kern(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& cost,
             const std::vector<int>& z,
             const T2__& theta_0,
             const T3__& theta_1,
             const T4__& gamma_0,
             const T5__& gamma_1,
             const T6__& sigma_0,
             const T7__& sigma_1,
             const T8__& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 13;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(cost));
        current_statement_begin__ = 15;
        validate_non_negative_index("K", "N", N);
        validate_non_negative_index("K", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(N, N);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 17;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 18;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 19;
                if (as_bool((primitive_value(logical_eq(get_base1(z, i, "z", 1), 1)) && primitive_value(logical_eq(get_base1(z, j, "z", 1), 1))))) {
                    current_statement_begin__ = 20;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (gamma_1 * pow((1.0 + (theta_1 * get_base1(cost, i, j, "cost", 1))), p)), 
                                "assigning variable K");
                } else if (as_bool((primitive_value(logical_eq(get_base1(z, i, "z", 1), 0)) && primitive_value(logical_eq(get_base1(z, j, "z", 1), 0))))) {
                    current_statement_begin__ = 22;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (gamma_0 * pow((1.0 + (theta_0 * get_base1(cost, i, j, "cost", 1))), p)), 
                                "assigning variable K");
                } else {
                    current_statement_begin__ = 24;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                0.0, 
                                "assigning variable K");
                }
            }
        }
        current_statement_begin__ = 28;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 29;
            if (as_bool(logical_eq(get_base1(z, i, "z", 1), 1))) {
                current_statement_begin__ = 30;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (stan::model::rvalue(K, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "K") + sigma_1), 
                            "assigning variable K");
            } else if (as_bool(logical_eq(get_base1(z, i, "z", 1), 0))) {
                current_statement_begin__ = 32;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (stan::model::rvalue(K, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "K") + sigma_0), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 36;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct pol_kern_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& cost,
             const std::vector<int>& z,
             const T2__& theta_0,
             const T3__& theta_1,
             const T4__& gamma_0,
             const T5__& gamma_1,
             const T6__& sigma_0,
             const T7__& sigma_1,
             const T8__& p, std::ostream* pstream__) const {
        return pol_kern(cost, z, theta_0, theta_1, gamma_0, gamma_1, sigma_0, sigma_1, p, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
rbf_kern(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& cost,
             const std::vector<int>& z,
             const T2__& theta_0,
             const T3__& theta_1,
             const T4__& gamma_0,
             const T5__& gamma_1,
             const T6__& sigma_0,
             const T7__& sigma_1, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 48;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(cost));
        current_statement_begin__ = 50;
        validate_non_negative_index("K", "N", N);
        validate_non_negative_index("K", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(N, N);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 52;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 53;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 54;
                if (as_bool((primitive_value(logical_eq(get_base1(z, i, "z", 1), 1)) && primitive_value(logical_eq(get_base1(z, j, "z", 1), 1))))) {
                    current_statement_begin__ = 55;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (gamma_1 * stan::math::exp(((-(0.5) * theta_1) * get_base1(cost, i, j, "cost", 1)))), 
                                "assigning variable K");
                } else if (as_bool((primitive_value(logical_eq(get_base1(z, i, "z", 1), 0)) && primitive_value(logical_eq(get_base1(z, j, "z", 1), 0))))) {
                    current_statement_begin__ = 57;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (gamma_0 * stan::math::exp(((-(0.5) * theta_0) * get_base1(cost, i, j, "cost", 1)))), 
                                "assigning variable K");
                } else {
                    current_statement_begin__ = 59;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                0.0, 
                                "assigning variable K");
                }
            }
        }
        current_statement_begin__ = 63;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 64;
            if (as_bool(logical_eq(get_base1(z, i, "z", 1), 1))) {
                current_statement_begin__ = 65;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (stan::model::rvalue(K, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "K") + sigma_1), 
                            "assigning variable K");
            } else if (as_bool(logical_eq(get_base1(z, i, "z", 1), 0))) {
                current_statement_begin__ = 67;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (stan::model::rvalue(K, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "K") + sigma_0), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 71;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rbf_kern_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& cost,
             const std::vector<int>& z,
             const T2__& theta_0,
             const T3__& theta_1,
             const T4__& gamma_0,
             const T5__& gamma_1,
             const T6__& sigma_0,
             const T7__& sigma_1, std::ostream* pstream__) const {
        return rbf_kern(cost, z, theta_0, theta_1, gamma_0, gamma_1, sigma_0, sigma_1, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
linear_kern(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& cost,
                const std::vector<int>& z,
                const T2__& sigma_0,
                const T3__& sigma_1, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 83;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(cost));
        current_statement_begin__ = 85;
        validate_non_negative_index("K", "N", N);
        validate_non_negative_index("K", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(N, N);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 87;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 88;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 89;
                if (as_bool(logical_eq(get_base1(z, i, "z", 1), get_base1(z, j, "z", 1)))) {
                    current_statement_begin__ = 90;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(cost, i, j, "cost", 1), 
                                "assigning variable K");
                } else {
                    current_statement_begin__ = 92;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                0.0, 
                                "assigning variable K");
                }
            }
        }
        current_statement_begin__ = 96;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 97;
            if (as_bool(logical_eq(get_base1(z, i, "z", 1), 1))) {
                current_statement_begin__ = 98;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (stan::model::rvalue(K, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "K") + sigma_1), 
                            "assigning variable K");
            } else if (as_bool(logical_eq(get_base1(z, i, "z", 1), 0))) {
                current_statement_begin__ = 100;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (stan::model::rvalue(K, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "K") + sigma_0), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 104;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct linear_kern_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& cost,
                const std::vector<int>& z,
                const T2__& sigma_0,
                const T3__& sigma_1, std::ostream* pstream__) const {
        return linear_kern(cost, z, sigma_0, sigma_1, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
pol_kern_dose(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& cost_0,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& cost_1,
                  const T2__& theta_0,
                  const T3__& theta_1,
                  const T4__& gamma_0,
                  const T5__& gamma_1,
                  const T6__& sigma,
                  const T7__& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 113;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(cost_0));
        current_statement_begin__ = 115;
        validate_non_negative_index("K", "N", N);
        validate_non_negative_index("K", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(N, N);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 119;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 120;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 121;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (((gamma_0 * pow((1.0 + (theta_0 * get_base1(cost_0, i, j, "cost_0", 1))), p)) * gamma_1) * pow((1.0 + (theta_1 * get_base1(cost_1, i, j, "cost_1", 1))), p)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 125;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct pol_kern_dose_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& cost_0,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& cost_1,
                  const T2__& theta_0,
                  const T3__& theta_1,
                  const T4__& gamma_0,
                  const T5__& gamma_1,
                  const T6__& sigma,
                  const T7__& p, std::ostream* pstream__) const {
        return pol_kern_dose(cost_0, cost_1, theta_0, theta_1, gamma_0, gamma_1, sigma, p, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_gp_hyper
  : public stan::model::model_base_crtp<model_gp_hyper> {
private:
        int N;
        vector_d y;
        matrix_d discrep;
        matrix_d discrep_z;
        std::vector<int> z;
        double p;
        int is_dose;
        int kernel;
        vector_d mu;
        int poly;
        int dose_var;
        int num_param;
public:
    model_gp_hyper(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_gp_hyper(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_gp_hyper_namespace::model_gp_hyper";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 130;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 131;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 132;
            validate_non_negative_index("discrep", "N", N);
            validate_non_negative_index("discrep", "N", N);
            context__.validate_dims("data initialization", "discrep", "matrix_d", context__.to_vec(N,N));
            discrep = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            vals_r__ = context__.vals_r("discrep");
            pos__ = 0;
            size_t discrep_j_2_max__ = N;
            size_t discrep_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < discrep_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < discrep_j_1_max__; ++j_1__) {
                    discrep(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 133;
            validate_non_negative_index("discrep_z", "N", N);
            validate_non_negative_index("discrep_z", "N", N);
            context__.validate_dims("data initialization", "discrep_z", "matrix_d", context__.to_vec(N,N));
            discrep_z = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            vals_r__ = context__.vals_r("discrep_z");
            pos__ = 0;
            size_t discrep_z_j_2_max__ = N;
            size_t discrep_z_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < discrep_z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < discrep_z_j_1_max__; ++j_1__) {
                    discrep_z(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 134;
            validate_non_negative_index("z", "N", N);
            context__.validate_dims("data initialization", "z", "int", context__.to_vec(N));
            z = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("z");
            pos__ = 0;
            size_t z_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
                z[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 135;
            context__.validate_dims("data initialization", "p", "double", context__.to_vec());
            p = double(0);
            vals_r__ = context__.vals_r("p");
            pos__ = 0;
            p = vals_r__[pos__++];
            current_statement_begin__ = 136;
            context__.validate_dims("data initialization", "is_dose", "int", context__.to_vec());
            is_dose = int(0);
            vals_i__ = context__.vals_i("is_dose");
            pos__ = 0;
            is_dose = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_dose", is_dose, 0);
            check_less_or_equal(function__, "is_dose", is_dose, 1);
            current_statement_begin__ = 137;
            context__.validate_dims("data initialization", "kernel", "int", context__.to_vec());
            kernel = int(0);
            vals_i__ = context__.vals_i("kernel");
            pos__ = 0;
            kernel = vals_i__[pos__++];
            check_greater_or_equal(function__, "kernel", kernel, 1);
            check_less_or_equal(function__, "kernel", kernel, 3);
            // initialize transformed data variables
            current_statement_begin__ = 141;
            validate_non_negative_index("mu", "N", N);
            mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 142;
            poly = int(0);
            stan::math::fill(poly, std::numeric_limits<int>::min());
            stan::math::assign(poly,0);
            current_statement_begin__ = 143;
            dose_var = int(0);
            stan::math::fill(dose_var, std::numeric_limits<int>::min());
            stan::math::assign(dose_var,2);
            current_statement_begin__ = 144;
            num_param = int(0);
            stan::math::fill(num_param, std::numeric_limits<int>::min());
            stan::math::assign(num_param,1);
            // execute transformed data statements
            current_statement_begin__ = 146;
            if (as_bool(logical_eq(kernel, 3))) {
                current_statement_begin__ = 146;
                stan::math::assign(num_param, 0);
            }
            current_statement_begin__ = 147;
            if (as_bool(logical_eq(kernel, 1))) {
                current_statement_begin__ = 147;
                stan::math::assign(poly, 1);
            }
            current_statement_begin__ = 148;
            if (as_bool(logical_eq(is_dose, 1))) {
                current_statement_begin__ = 148;
                stan::math::assign(dose_var, 1);
            }
            current_statement_begin__ = 150;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 150;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            0.0, 
                            "assigning variable mu");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 156;
            validate_non_negative_index("sigma", "dose_var", dose_var);
            num_params_r__ += (1 * dose_var);
            current_statement_begin__ = 157;
            validate_non_negative_index("theta_0", "num_param", num_param);
            num_params_r__ += (1 * num_param);
            current_statement_begin__ = 158;
            validate_non_negative_index("theta_1", "num_param", num_param);
            num_params_r__ += (1 * num_param);
            current_statement_begin__ = 159;
            validate_non_negative_index("gamma_0", "num_param", num_param);
            num_params_r__ += (1 * num_param);
            current_statement_begin__ = 160;
            validate_non_negative_index("gamma_1", "num_param", num_param);
            num_params_r__ += (1 * num_param);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_gp_hyper() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 156;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "dose_var", dose_var);
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(dose_var));
        std::vector<double> sigma(dose_var, double(0));
        size_t sigma_k_0_max__ = dose_var;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = dose_var;
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 157;
        if (!(context__.contains_r("theta_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_0");
        pos__ = 0U;
        validate_non_negative_index("theta_0", "num_param", num_param);
        context__.validate_dims("parameter initialization", "theta_0", "double", context__.to_vec(num_param));
        std::vector<double> theta_0(num_param, double(0));
        size_t theta_0_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < theta_0_k_0_max__; ++k_0__) {
            theta_0[k_0__] = vals_r__[pos__++];
        }
        size_t theta_0_i_0_max__ = num_param;
        for (size_t i_0__ = 0; i_0__ < theta_0_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, theta_0[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_0: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 158;
        if (!(context__.contains_r("theta_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_1");
        pos__ = 0U;
        validate_non_negative_index("theta_1", "num_param", num_param);
        context__.validate_dims("parameter initialization", "theta_1", "double", context__.to_vec(num_param));
        std::vector<double> theta_1(num_param, double(0));
        size_t theta_1_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < theta_1_k_0_max__; ++k_0__) {
            theta_1[k_0__] = vals_r__[pos__++];
        }
        size_t theta_1_i_0_max__ = num_param;
        for (size_t i_0__ = 0; i_0__ < theta_1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, theta_1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 159;
        if (!(context__.contains_r("gamma_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_0");
        pos__ = 0U;
        validate_non_negative_index("gamma_0", "num_param", num_param);
        context__.validate_dims("parameter initialization", "gamma_0", "double", context__.to_vec(num_param));
        std::vector<double> gamma_0(num_param, double(0));
        size_t gamma_0_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < gamma_0_k_0_max__; ++k_0__) {
            gamma_0[k_0__] = vals_r__[pos__++];
        }
        size_t gamma_0_i_0_max__ = num_param;
        for (size_t i_0__ = 0; i_0__ < gamma_0_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, gamma_0[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_0: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 160;
        if (!(context__.contains_r("gamma_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_1");
        pos__ = 0U;
        validate_non_negative_index("gamma_1", "num_param", num_param);
        context__.validate_dims("parameter initialization", "gamma_1", "double", context__.to_vec(num_param));
        std::vector<double> gamma_1(num_param, double(0));
        size_t gamma_1_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < gamma_1_k_0_max__; ++k_0__) {
            gamma_1[k_0__] = vals_r__[pos__++];
        }
        size_t gamma_1_i_0_max__ = num_param;
        for (size_t i_0__ = 0; i_0__ < gamma_1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, gamma_1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 156;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = dose_var;
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 157;
            std::vector<local_scalar_t__> theta_0;
            size_t theta_0_d_0_max__ = num_param;
            theta_0.reserve(theta_0_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < theta_0_d_0_max__; ++d_0__) {
                if (jacobian__)
                    theta_0.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    theta_0.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 158;
            std::vector<local_scalar_t__> theta_1;
            size_t theta_1_d_0_max__ = num_param;
            theta_1.reserve(theta_1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < theta_1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    theta_1.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    theta_1.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 159;
            std::vector<local_scalar_t__> gamma_0;
            size_t gamma_0_d_0_max__ = num_param;
            gamma_0.reserve(gamma_0_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_0_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gamma_0.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    gamma_0.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 160;
            std::vector<local_scalar_t__> gamma_1;
            size_t gamma_1_d_0_max__ = num_param;
            gamma_1.reserve(gamma_1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gamma_1.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    gamma_1.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 164;
            validate_non_negative_index("Sigma", "N", N);
            validate_non_negative_index("Sigma", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Sigma(N, N);
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 166;
            if (as_bool((primitive_value(logical_eq(is_dose, 1)) && primitive_value(logical_eq(kernel, 1))))) {
                current_statement_begin__ = 167;
                stan::math::assign(Sigma, pol_kern_dose(discrep_z, discrep, get_base1(theta_0, 1, "theta_0", 1), get_base1(theta_1, 1, "theta_1", 1), get_base1(gamma_0, 1, "gamma_0", 1), get_base1(gamma_1, 1, "gamma_1", 1), get_base1(sigma, 1, "sigma", 1), p, pstream__));
            } else {
                current_statement_begin__ = 175;
                if (as_bool(logical_eq(kernel, 1))) {
                    current_statement_begin__ = 176;
                    stan::math::assign(Sigma, pol_kern(discrep, z, get_base1(theta_0, 1, "theta_0", 1), get_base1(theta_1, 1, "theta_1", 1), get_base1(gamma_0, 1, "gamma_0", 1), get_base1(gamma_1, 1, "gamma_1", 1), get_base1(sigma, 1, "sigma", 1), get_base1(sigma, 2, "sigma", 1), p, pstream__));
                } else if (as_bool(logical_eq(kernel, 2))) {
                    current_statement_begin__ = 185;
                    stan::math::assign(Sigma, rbf_kern(discrep, z, get_base1(theta_0, 1, "theta_0", 1), get_base1(theta_1, 1, "theta_1", 1), get_base1(gamma_0, 1, "gamma_0", 1), get_base1(gamma_1, 1, "gamma_1", 1), get_base1(sigma, 1, "sigma", 1), get_base1(sigma, 2, "sigma", 1), pstream__));
                } else if (as_bool(logical_eq(kernel, 3))) {
                    current_statement_begin__ = 193;
                    stan::math::assign(Sigma, linear_kern(discrep, z, get_base1(sigma, 1, "sigma", 1), get_base1(sigma, 2, "sigma", 1), pstream__));
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 164;
            size_t Sigma_j_1_max__ = N;
            size_t Sigma_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Sigma(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Sigma" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 204;
            lp_accum__.add(multi_normal_log<propto__>(y, mu, Sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma");
        names__.push_back("theta_0");
        names__.push_back("theta_1");
        names__.push_back("gamma_0");
        names__.push_back("gamma_1");
        names__.push_back("Sigma");
        names__.push_back("marg_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(dose_var);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_param);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_param);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_param);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_param);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_gp_hyper_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = dose_var;
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_k_0_max__ = dose_var;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        std::vector<double> theta_0;
        size_t theta_0_d_0_max__ = num_param;
        theta_0.reserve(theta_0_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < theta_0_d_0_max__; ++d_0__) {
            theta_0.push_back(in__.scalar_lb_constrain(0));
        }
        size_t theta_0_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < theta_0_k_0_max__; ++k_0__) {
            vars__.push_back(theta_0[k_0__]);
        }
        std::vector<double> theta_1;
        size_t theta_1_d_0_max__ = num_param;
        theta_1.reserve(theta_1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < theta_1_d_0_max__; ++d_0__) {
            theta_1.push_back(in__.scalar_lb_constrain(0));
        }
        size_t theta_1_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < theta_1_k_0_max__; ++k_0__) {
            vars__.push_back(theta_1[k_0__]);
        }
        std::vector<double> gamma_0;
        size_t gamma_0_d_0_max__ = num_param;
        gamma_0.reserve(gamma_0_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_0_d_0_max__; ++d_0__) {
            gamma_0.push_back(in__.scalar_lb_constrain(0));
        }
        size_t gamma_0_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < gamma_0_k_0_max__; ++k_0__) {
            vars__.push_back(gamma_0[k_0__]);
        }
        std::vector<double> gamma_1;
        size_t gamma_1_d_0_max__ = num_param;
        gamma_1.reserve(gamma_1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_1_d_0_max__; ++d_0__) {
            gamma_1.push_back(in__.scalar_lb_constrain(0));
        }
        size_t gamma_1_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < gamma_1_k_0_max__; ++k_0__) {
            vars__.push_back(gamma_1[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 164;
            validate_non_negative_index("Sigma", "N", N);
            validate_non_negative_index("Sigma", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma(N, N);
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 166;
            if (as_bool((primitive_value(logical_eq(is_dose, 1)) && primitive_value(logical_eq(kernel, 1))))) {
                current_statement_begin__ = 167;
                stan::math::assign(Sigma, pol_kern_dose(discrep_z, discrep, get_base1(theta_0, 1, "theta_0", 1), get_base1(theta_1, 1, "theta_1", 1), get_base1(gamma_0, 1, "gamma_0", 1), get_base1(gamma_1, 1, "gamma_1", 1), get_base1(sigma, 1, "sigma", 1), p, pstream__));
            } else {
                current_statement_begin__ = 175;
                if (as_bool(logical_eq(kernel, 1))) {
                    current_statement_begin__ = 176;
                    stan::math::assign(Sigma, pol_kern(discrep, z, get_base1(theta_0, 1, "theta_0", 1), get_base1(theta_1, 1, "theta_1", 1), get_base1(gamma_0, 1, "gamma_0", 1), get_base1(gamma_1, 1, "gamma_1", 1), get_base1(sigma, 1, "sigma", 1), get_base1(sigma, 2, "sigma", 1), p, pstream__));
                } else if (as_bool(logical_eq(kernel, 2))) {
                    current_statement_begin__ = 185;
                    stan::math::assign(Sigma, rbf_kern(discrep, z, get_base1(theta_0, 1, "theta_0", 1), get_base1(theta_1, 1, "theta_1", 1), get_base1(gamma_0, 1, "gamma_0", 1), get_base1(gamma_1, 1, "gamma_1", 1), get_base1(sigma, 1, "sigma", 1), get_base1(sigma, 2, "sigma", 1), pstream__));
                } else if (as_bool(logical_eq(kernel, 3))) {
                    current_statement_begin__ = 193;
                    stan::math::assign(Sigma, linear_kern(discrep, z, get_base1(sigma, 1, "sigma", 1), get_base1(sigma, 2, "sigma", 1), pstream__));
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t Sigma_j_2_max__ = N;
                size_t Sigma_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                        vars__.push_back(Sigma(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 208;
            double marg_lik;
            (void) marg_lik;  // dummy to suppress unused var warning
            stan::math::initialize(marg_lik, DUMMY_VAR__);
            stan::math::fill(marg_lik, DUMMY_VAR__);
            stan::math::assign(marg_lik,multi_normal_log(y, mu, Sigma));
            // validate, write generated quantities
            current_statement_begin__ = 208;
            vars__.push_back(marg_lik);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_gp_hyper";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t sigma_k_0_max__ = dose_var;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_0_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < theta_0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_1_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < theta_1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_0_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < gamma_0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_1_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < gamma_1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Sigma_j_2_max__ = N;
            size_t Sigma_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "marg_lik";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t sigma_k_0_max__ = dose_var;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_0_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < theta_0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_1_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < theta_1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_0_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < gamma_0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_1_k_0_max__ = num_param;
        for (size_t k_0__ = 0; k_0__ < gamma_1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Sigma_j_2_max__ = N;
            size_t Sigma_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "marg_lik";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_gp_hyper_namespace::model_gp_hyper stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
