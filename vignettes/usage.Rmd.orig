---
title: "Using causalOT"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Using causalOT}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup, include = FALSE}
library(causalOT)
```

## Introduction
`causalOT` was developed to reproduce the methods in [*Optimal transport methods for causal inference*](https://arxiv.org/abs/2109.01991). The functions in the package are built to construct weights to make distributions more same and estimate causal effects. We recommend using the Causal Optimal Transport methods since they are semi- to non-parametric. This document will describe some simple usages of the functions in the package and should be enough to get users started.


## Estimating weights
The weights can be estimated by using the `calc_weight` function in the package. We select optimal hyperparameters through our bootstrap-based algorithm and target the average treatment effect.
``` {r wts, cache = TRUE}
library(causalOT)
set.seed(1111)

hainmueller <- Hainmueller$new(n = 128)
hainmueller$gen_data()

weights <- calc_weight(x = hainmueller, method = "COT",
                       estimand = "ATE")

```
These weights will balance distributions, making estimates of treatment effects the same. We can then estimate effects with 
``` {r est}
tau_hat <- estimate_effect(x = hainmueller, z = NULL, y = NULL, 
                           weights = weights,
                           estimate.separately = TRUE,
                           augmented.model = FALSE,
                           normalize.weights = TRUE)
```
This creates an object of class `causalEffect` which can be fed into the native `R` function `confint` to calculate asymptotic confidence intervals.
``` {r ci}
ci_tau <- confint(object = tau_hat, level = 0.95)
```
This then gives the following estimate and C.I.
``` {r print}
print(tau_hat@estimate)
print(ci_tau$CI)
```

## Diagnostics
Diagnostics are also an important part of deciding whether the weights perform well. There are several areas that we will explore:

1. Effective sample size
2. Mean balance
3. Distributional balance

#### 1. Effective sample size
Typically, estimated samples sizes with weights are calculated as $\sum_i 1/w_i^2$ and gives us a measure of how much information is in the sample. The lower the effective sample size (ESS), the higher the variance, and the lower the sample size, the more weight a few individuals have. Of course, we can calculate this in `causalOT`!
``` {r}
ESS(weights)
```

Of course, this measure has problems because it can fail to diagnose problems with variable weights. In response, [Vehtari et al.](https://arxiv.org/abs/1507.02646) use Pareto smoothed importance sampling. We offer some shell code to adapt the class `causalWeights` to the `loo` package:
``` {r}
raw_psis <- PSIS(weights)
```
This will also return the Pareto smoothed weights and log weights.

If we want to easily examine the PSIS diagnostics, we can pull those out too
``` {r}
PSIS_diag(raw_psis)
```
We can see all of the $k$ values are below the recommended 0.5, indicating finite variance and that the central limit theorem holds. Note the estimated sample sizes are a bit lower than the `ESS` method above.

#### 2. Mean balance
Many authors consider the standardized absolute mean balance as a marker for important balance: see [Stuart (2010)](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2943670/). That is
$$ \frac{|\overline{X}_c - \overline{X}_t| }{\sigma_{\text{pool}}},$$ where
$\overline{X}_c$ is the mean in the controls, $\overline{X}_t$ is the mean in the treated, and $\sigma_{\text{pool}}$ is the pooled standard deviation.
We offer such checks in `causalOT` as well.

First, we consider pre-weighting mean balance
``` {r}
mean_balance(x = hainmueller)
```
and after weighting mean balance
``` {r}
mean_bal(x = hainmueller, weights = weights)
```
Pretty good!

However, mean balance doesn't ensure distributional balance.

#### 3. Distributional balance
Ultimately, distributional balance is what we care about in causal inference. Fortunately, we can also measure that too. We consider the 2-Sinkhorn divergence of [Genevay et al.](http://proceedings.mlr.press/v84/genevay18a/genevay18a.pdf) since it metrizes the convergence in distribution.

Before weighting, distributional balance looks poor:
```{r}
# controls
ot_distance(x = hainmueller$get_x0(), y = hainmueller$get_x(),
              a = NULL, b = rep(1/128,128),
              p = 2, penalty = 1e3, debias = TRUE)
#treated
ot_distance(x = hainmueller$get_x1(), y = hainmueller$get_x(),
              a = NULL, b = rep(1/128,128),
              p = 2, penalty = 1e3, debias = TRUE)

```

But after weighting, it looks much better!
```{r}
# controls
ot_distance(x1 = hainmueller$get_x0(), x2 = hainmueller$get_x(),
              a = weights$w0, b = rep(1/128,128),
              p = 2, penalty = 1e3, debias = TRUE)
# treated
ot_distance(x1 = hainmueller$get_x1(), x2 = hainmueller$get_x(),
              a = weights$w1, b = rep(1/128,128),
              p = 2, penalty = 1e3, debias = TRUE)
```
After Causal Optimal Transport, the distributions are *much* more similar.
We can also simply feed the output of calc_weight directly into the `ot_distance` function:
```{r}
ot_distance(x1 = weights, p = 2, penalty = 1e3, debias = TRUE)
```
and the S4 deployment takes care of the rest.

Finally, we can construct a summary of the optimal transport distances, Pareto k statistics, effective sample size, and mean balance using the summary method:

```{r}
summarized_cw <- summary(weights, penalty = 1000)
```
We can then print the object to the screen:
```{r}
summarized_cw
```
or we can make some diagnostic plots too!
```{r}
plot(summarized_cw)
```

## Other methods
The calc weight function can also handle other methods. We have implemented methods for logistic or probit regression, the covariate balancing propensity score (CBPS), stable balancing weights (SBW), entropy balancing weights (EntropyBW), and the synthetic control method (SCM).
```{r eval = FALSE}
calc_weight(x = hainmueller, method = "Logistic",
                       estimand = "ATE")

calc_weight(x = hainmueller, method = "Probit",
                       estimand = "ATE")

calc_weight(x = hainmueller, method = "CBPS",
                       estimand = "ATE")

calc_weight(x = hainmueller, method = "SBW")

calc_weight(x = hainmueller, method = "EntropyBW")

calc_weight(x = hainmueller, method = "SCM")
```

The function also accepts methods "EnergyBW", for Energy Balancing Weights of Hainmueller and Mak (2020), and "NNM", for nearest neighbor matching with replacement, but these are special cases of COT with the penalty parameter $\lambda$ forced to be $\infty$ and $0$, respectively.
